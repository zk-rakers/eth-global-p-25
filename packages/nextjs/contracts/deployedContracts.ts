/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    PrivacyMarketplace: {
      address: "0x700b6a60ce7eaaea56f065753d8dcb9653dbad35",
      abi: [
        {
          type: "function",
          name: "acceptBid",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "closeRequest",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getBid",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "bidderCommitment",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "encryptedBidMetadataCID",
              type: "string",
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isAccepted",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "encryptedKey",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRequest",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "commitment",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "encryptedCID",
              type: "string",
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isActive",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "bidCount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTotalBids",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTotalRequests",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isBidAccepted",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "postRequest",
          inputs: [
            {
              name: "commitment",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "encryptedCID",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "publishEncryptedKey",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "encryptedKey",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "requestCounter",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "requests",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "commitment",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "encryptedCID",
              type: "string",
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isActive",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "bidCount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "submitBid",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "bidderCommitment",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "encryptedBidMetadataCID",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "totalBids",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "BidAccepted",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "BidSubmitted",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "bidderCommitment",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "encryptedBidMetadataCID",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ChannelKeyPublished",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "bidIndex",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "encryptedKey",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RequestPosted",
          inputs: [
            {
              name: "requestId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "commitment",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "encryptedCID",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "BidAlreadyAccepted",
          inputs: [],
        },
        {
          type: "error",
          name: "BidNotFound",
          inputs: [],
        },
        {
          type: "error",
          name: "EmptyEncryptedCID",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidCommitment",
          inputs: [],
        },
        {
          type: "error",
          name: "RequestInactive",
          inputs: [],
        },
        {
          type: "error",
          name: "RequestNotFound",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1748713399.json",
      deploymentScript: "Deploy.s.sol",
    },
    ZkAccountFactory: {
      address: "0xe1da8919f262ee86f9be05059c9280142cf23f48",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_entryPoint",
              type: "address",
              internalType: "contract IEntryPoint",
            },
            {
              name: "_zkVerifier",
              type: "address",
              internalType: "contract IZKVerifier",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createAccount",
          inputs: [
            {
              name: "proof",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "root",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "ret",
              type: "address",
              internalType: "contract ZkAccount",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createAccountWithAutoSalt",
          inputs: [
            {
              name: "proof",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "root",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract ZkAccount",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "entryPoint",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IEntryPoint",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "generateSalt",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getAddress",
          inputs: [
            {
              name: "proof",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "root",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "zkVerifier",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IZKVerifier",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "error",
          name: "InvalidProof",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1748713399.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
