schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Bid {
  id: ID!
  request: Request!
  bidIndex: BigInt!
  bidderCommitment: Bytes!
  encryptedBidMetadataCID: String!
  timestamp: BigInt!
  isAccepted: Boolean!
  userIdentifier: Bytes!
  encryptedKey: String
}

input Bid_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: Request_filter
  bidIndex: BigInt
  bidIndex_not: BigInt
  bidIndex_gt: BigInt
  bidIndex_lt: BigInt
  bidIndex_gte: BigInt
  bidIndex_lte: BigInt
  bidIndex_in: [BigInt!]
  bidIndex_not_in: [BigInt!]
  bidderCommitment: Bytes
  bidderCommitment_not: Bytes
  bidderCommitment_gt: Bytes
  bidderCommitment_lt: Bytes
  bidderCommitment_gte: Bytes
  bidderCommitment_lte: Bytes
  bidderCommitment_in: [Bytes!]
  bidderCommitment_not_in: [Bytes!]
  bidderCommitment_contains: Bytes
  bidderCommitment_not_contains: Bytes
  encryptedBidMetadataCID: String
  encryptedBidMetadataCID_not: String
  encryptedBidMetadataCID_gt: String
  encryptedBidMetadataCID_lt: String
  encryptedBidMetadataCID_gte: String
  encryptedBidMetadataCID_lte: String
  encryptedBidMetadataCID_in: [String!]
  encryptedBidMetadataCID_not_in: [String!]
  encryptedBidMetadataCID_contains: String
  encryptedBidMetadataCID_contains_nocase: String
  encryptedBidMetadataCID_not_contains: String
  encryptedBidMetadataCID_not_contains_nocase: String
  encryptedBidMetadataCID_starts_with: String
  encryptedBidMetadataCID_starts_with_nocase: String
  encryptedBidMetadataCID_not_starts_with: String
  encryptedBidMetadataCID_not_starts_with_nocase: String
  encryptedBidMetadataCID_ends_with: String
  encryptedBidMetadataCID_ends_with_nocase: String
  encryptedBidMetadataCID_not_ends_with: String
  encryptedBidMetadataCID_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  isAccepted: Boolean
  isAccepted_not: Boolean
  isAccepted_in: [Boolean!]
  isAccepted_not_in: [Boolean!]
  userIdentifier: Bytes
  userIdentifier_not: Bytes
  userIdentifier_gt: Bytes
  userIdentifier_lt: Bytes
  userIdentifier_gte: Bytes
  userIdentifier_lte: Bytes
  userIdentifier_in: [Bytes!]
  userIdentifier_not_in: [Bytes!]
  userIdentifier_contains: Bytes
  userIdentifier_not_contains: Bytes
  encryptedKey: String
  encryptedKey_not: String
  encryptedKey_gt: String
  encryptedKey_lt: String
  encryptedKey_gte: String
  encryptedKey_lte: String
  encryptedKey_in: [String!]
  encryptedKey_not_in: [String!]
  encryptedKey_contains: String
  encryptedKey_contains_nocase: String
  encryptedKey_not_contains: String
  encryptedKey_not_contains_nocase: String
  encryptedKey_starts_with: String
  encryptedKey_starts_with_nocase: String
  encryptedKey_not_starts_with: String
  encryptedKey_not_starts_with_nocase: String
  encryptedKey_ends_with: String
  encryptedKey_ends_with_nocase: String
  encryptedKey_not_ends_with: String
  encryptedKey_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bid_filter]
  or: [Bid_filter]
}

enum Bid_orderBy {
  id
  request
  request__id
  request__commitment
  request__encryptedCID
  request__timestamp
  request__isActive
  request__bidCount
  request__userIdentifier
  request__title
  bidIndex
  bidderCommitment
  encryptedBidMetadataCID
  timestamp
  isAccepted
  userIdentifier
  encryptedKey
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Greeting {
  id: ID!
  sender: Sender!
  greeting: String!
  premium: Boolean
  value: BigInt
  createdAt: BigInt!
  transactionHash: String!
}

input Greeting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Sender_filter
  greeting: String
  greeting_not: String
  greeting_gt: String
  greeting_lt: String
  greeting_gte: String
  greeting_lte: String
  greeting_in: [String!]
  greeting_not_in: [String!]
  greeting_contains: String
  greeting_contains_nocase: String
  greeting_not_contains: String
  greeting_not_contains_nocase: String
  greeting_starts_with: String
  greeting_starts_with_nocase: String
  greeting_not_starts_with: String
  greeting_not_starts_with_nocase: String
  greeting_ends_with: String
  greeting_ends_with_nocase: String
  greeting_not_ends_with: String
  greeting_not_ends_with_nocase: String
  premium: Boolean
  premium_not: Boolean
  premium_in: [Boolean!]
  premium_not_in: [Boolean!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Greeting_filter]
  or: [Greeting_filter]
}

enum Greeting_orderBy {
  id
  sender
  sender__id
  sender__address
  sender__createdAt
  sender__greetingCount
  greeting
  premium
  value
  createdAt
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  greeting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Greeting
  greetings(
    skip: Int = 0
    first: Int = 100
    orderBy: Greeting_orderBy
    orderDirection: OrderDirection
    where: Greeting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Greeting!]!
  sender(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sender
  senders(
    skip: Int = 0
    first: Int = 100
    orderBy: Sender_orderBy
    orderDirection: OrderDirection
    where: Sender_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sender!]!
  request(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Request
  requests(
    skip: Int = 0
    first: Int = 100
    orderBy: Request_orderBy
    orderDirection: OrderDirection
    where: Request_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Request!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Request {
  id: ID!
  commitment: Bytes!
  encryptedCID: String!
  timestamp: BigInt!
  isActive: Boolean!
  bidCount: BigInt!
  userIdentifier: Bytes!
  title: String!
  bids(skip: Int = 0, first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, where: Bid_filter): [Bid!]!
}

input Request_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  commitment: Bytes
  commitment_not: Bytes
  commitment_gt: Bytes
  commitment_lt: Bytes
  commitment_gte: Bytes
  commitment_lte: Bytes
  commitment_in: [Bytes!]
  commitment_not_in: [Bytes!]
  commitment_contains: Bytes
  commitment_not_contains: Bytes
  encryptedCID: String
  encryptedCID_not: String
  encryptedCID_gt: String
  encryptedCID_lt: String
  encryptedCID_gte: String
  encryptedCID_lte: String
  encryptedCID_in: [String!]
  encryptedCID_not_in: [String!]
  encryptedCID_contains: String
  encryptedCID_contains_nocase: String
  encryptedCID_not_contains: String
  encryptedCID_not_contains_nocase: String
  encryptedCID_starts_with: String
  encryptedCID_starts_with_nocase: String
  encryptedCID_not_starts_with: String
  encryptedCID_not_starts_with_nocase: String
  encryptedCID_ends_with: String
  encryptedCID_ends_with_nocase: String
  encryptedCID_not_ends_with: String
  encryptedCID_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  bidCount: BigInt
  bidCount_not: BigInt
  bidCount_gt: BigInt
  bidCount_lt: BigInt
  bidCount_gte: BigInt
  bidCount_lte: BigInt
  bidCount_in: [BigInt!]
  bidCount_not_in: [BigInt!]
  userIdentifier: Bytes
  userIdentifier_not: Bytes
  userIdentifier_gt: Bytes
  userIdentifier_lt: Bytes
  userIdentifier_gte: Bytes
  userIdentifier_lte: Bytes
  userIdentifier_in: [Bytes!]
  userIdentifier_not_in: [Bytes!]
  userIdentifier_contains: Bytes
  userIdentifier_not_contains: Bytes
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  bids_: Bid_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Request_filter]
  or: [Request_filter]
}

enum Request_orderBy {
  id
  commitment
  encryptedCID
  timestamp
  isActive
  bidCount
  userIdentifier
  title
  bids
}

type Sender {
  id: ID!
  address: Bytes!
  greetings(skip: Int = 0, first: Int = 100, orderBy: Greeting_orderBy, orderDirection: OrderDirection, where: Greeting_filter): [Greeting!]
  createdAt: BigInt!
  greetingCount: BigInt!
}

input Sender_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  greetings_: Greeting_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  greetingCount: BigInt
  greetingCount_not: BigInt
  greetingCount_gt: BigInt
  greetingCount_lt: BigInt
  greetingCount_gte: BigInt
  greetingCount_lte: BigInt
  greetingCount_in: [BigInt!]
  greetingCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Sender_filter]
  or: [Sender_filter]
}

enum Sender_orderBy {
  id
  address
  greetings
  createdAt
  greetingCount
}

type Subscription {
  greeting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Greeting
  greetings(
    skip: Int = 0
    first: Int = 100
    orderBy: Greeting_orderBy
    orderDirection: OrderDirection
    where: Greeting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Greeting!]!
  sender(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sender
  senders(
    skip: Int = 0
    first: Int = 100
    orderBy: Sender_orderBy
    orderDirection: OrderDirection
    where: Sender_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sender!]!
  request(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Request
  requests(
    skip: Int = 0
    first: Int = 100
    orderBy: Request_orderBy
    orderDirection: OrderDirection
    where: Request_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Request!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}